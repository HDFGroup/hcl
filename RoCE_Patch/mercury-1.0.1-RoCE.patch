diff -Naur mercury-1.0.1/src/na/na_ofi.c mercury-1.0.1-RoCE-patch/src/na/na_ofi.c
--- mercury-1.0.1/src/na/na_ofi.c	2019-02-15 12:04:34.000000000 -0600
+++ mercury-1.0.1-RoCE-patch/src/na/na_ofi.c	2019-08-07 14:51:31.042806176 -0500
@@ -164,6 +164,7 @@
     )                                                                   \
     X(NA_OFI_PROV_MAX, "", "", 0, 0, 0, 0, 0)
 
+
 #define X(a, b, c, d, e, f, g, h) a,
 enum na_ofi_prov_type { NA_OFI_PROV_TYPES };
 #undef X
@@ -1093,6 +1094,7 @@
     }
 
     sin_addr->sin.sin_family = AF_INET;
+    // "%*[^:]*://:[^:]*:%"
     ret = sscanf(str, "%*[^:]://:%" SCNu16, &sin_addr->sin.sin_port);
     if (ret == 1)
         goto match_port;
@@ -3166,11 +3168,28 @@
 
     /* Get hostname/port info if available */
     if (resolve_name) {
+      /* printf("%s\n", resolve_name); */
         if (na_ofi_prov_addr_format[prov_type] == FI_SOCKADDR_IN) {
-            char *ifa_name;
+	  /* printf("inside FI_SOCKADDR_IN\n"); */
+	  char *ifa_name;
+
             struct na_ofi_sin_addr *na_ofi_sin_addr = NULL;
             unsigned int port = 0;
-
+	    // "[^:]*://%s://%s:%d"
+	    // "%*[^:]://%s:%d" SCNu16
+	    char* token; 
+	    char* rest=malloc(strlen(resolve_name)+1);
+	    char * tempifa;
+	    strcpy(rest,resolve_name); 
+	    int count=0; 
+	    while ((token = strtok_r(rest, ":", &rest))) 
+	      count++;
+	    /* printf("%d\n", count); */
+	    if (count == 3) {
+	      tempifa=malloc(strlen(resolve_name)+1);
+	      int ret = sscanf(resolve_name, "%[^:]://%s",tempifa,resolve_name);
+	    }
+	    /* free(rest); */
             /* Extract hostname */
             if (strstr(resolve_name, ":")) {
                 char *port_str = NULL;
@@ -3178,14 +3197,22 @@
                 strtok_r(resolve_name, ":", &port_str);
                 port = (unsigned int) strtoul(port_str, NULL, 10);
             }
+	    /* Try to get matching IP/device */
+	    ret = na_ofi_check_interface(resolve_name, port, &ifa_name,
+					 &na_ofi_sin_addr);
+	    /* printf("%s\n", ifa_name); */
+	    if (ret != NA_SUCCESS) {
+	      NA_LOG_ERROR("Could not check interfaces");
+	      goto out;
+	    }
+	    if (count == 3) {
+	      strcpy(ifa_name,tempifa);
+	      free(tempifa);
+	      /* printf("%d, %s, %s\n", ret, ifa_name, resolve_name); */
+	    }
 
-            /* Try to get matching IP/device */
-            ret = na_ofi_check_interface(resolve_name, port, &ifa_name,
-                &na_ofi_sin_addr);
-            if (ret != NA_SUCCESS) {
-                NA_LOG_ERROR("Could not check interfaces");
-                goto out;
-            }
+	    /* printf("%d\n", port); */
+            
 
             /* Set SIN addr if found */
             if (na_ofi_sin_addr && ifa_name) {
@@ -3193,10 +3220,12 @@
                 src_addrlen = sizeof(*na_ofi_sin_addr);
                 /* Make sure we are using the right domain */
                 strncpy(domain_name, ifa_name, NA_OFI_MAX_URI_LEN - 1);
+		/* printf("dmn: %s\n", domain_name); */
                 free(ifa_name);
             } else {
                 /* Allow for passing domain name directly */
                 strncpy(domain_name, resolve_name, NA_OFI_MAX_URI_LEN - 1);
+		/* printf("dmn: %s\n", domain_name); */
             }
         } else if (na_ofi_prov_addr_format[prov_type] == FI_ADDR_GNI) {
             struct na_ofi_sin_addr *na_ofi_sin_addr = NULL;
