# This is a basic workflow to help you get started with Actions

name: cmake

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push,pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  LOCAL: local

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: hdevarajan92/hcl:gcc8
    strategy:
      fail-fast: false
      matrix:
        include:
          - RPCLIB: ON
            THALLIUM_TCP: OFF
            THALLIUM_ROCE: OFF
          - RPCLIB: OFF
            THALLIUM_TCP: ON
            THALLIUM_ROCE: OFF
          - RPCLIB: OFF
            THALLIUM_TCP: OFF
            THALLIUM_ROCE: ON

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v1

#      - name: Cache Spack packages
#        uses: actions/cache@v2
#        id: spack-cache
#        with:
#          path: ~/${{ env.LOCAL }}
#          key: ${{ runner.os }}-${{ hashFiles('ci/install_deps.sh') }}
#          #restore-keys: |
#          #  ${{ runner.os }}-

#      - name: Install APT Dependencies
#        run: |
#          sudo apt update
#          sudo apt-get install -y autoconf
#          sudo apt-get install -y automake
#          sudo apt-get install -y zlib1g-dev
#          sudo apt-get install -y libsdl2-dev

#      - name: Build And Install Dependencies
#        if: steps.spack-cache.outputs.cache-hit != 'true'
#        run: ci/install_deps.sh

      - name: Build
        env:
          HCL_ENABLE_RPCLIB: ${{ matrix.RPCLIB }}
          HCL_ENABLE_THALLIUM_TCP: ${{ matrix.THALLIUM_TCP }}
          HCL_ENABLE_THALLIUM_ROCE: ${{ matrix.THALLIUM_ROCE }}
        run: ci/install_hcl.sh
      - name: Test
        env:
          HCL_ENABLE_RPCLIB: ${{ matrix.RPCLIB }}
          HCL_ENABLE_THALLIUM_TCP: ${{ matrix.THALLIUM_TCP }}
          HCL_ENABLE_THALLIUM_ROCE: ${{ matrix.THALLIUM_ROCE }}
        run: ci/run_hcl.sh
